
@model onlineexam.Models.QuestionModel


@*@Html.Raw(Model.Question)*@

@Scripts.Render("~/bundles/users")
<script>
    var TimeRemaining = 30;
    startick();
</script>

@*@Model.QuestionNumber*@

@{ var totalQuestion = Model.TotalQuestionInSet;

    //var endTime = ((DateTime)ViewBag.TimeExpire);

    //////DateTime? endTime = new DateTime();
    //////endTime = null;
    //////endTime = ((DateTime)ViewBag.TimeExpire);
    //var timeRemaining = TimeSpan.FromTicks(endTime.Ticks - DateTime.UtcNow.Ticks).TotalSeconds.ToString("#");

    //ViewBag.Title = "testme";
    ////var endtime = DateTime.UtcNow.AddSeconds(60);

    //var timeRemaining = TimeSpan.FromTicks(endtime.Ticks - DateTime.UtcNow.Ticks).TotalSeconds;


}
<div class="row">
    <div class="col-md-12">
        <div class="question-number">Question : @(Model.QuestionNumber)</div>
        @*<div>Time Remaining : <span id="minRemaining"></span>:<span id="secremain"></span></div>*@
        @*<div class="question-number">Time Remaining : @(Model.DurationInMinute)</div>*@
    </div>
</div>

@*@using (Html.BeginForm("PostAnswer", "Home", FormMethod.Post, new { @id = "form" }))*@
@using (Html.BeginForm("PostAnswer", "Home", FormMethod.Post, new { name = "myForm", id = "myForm" }))
{
    <input type="hidden" name="Direction" value="forward" />
    <input type="hidden" name="Token" value="@(Session["Token"])" />
    <input type="hidden" name="TestId" value="@(Model.TestId)" />
    <input type="hidden" name="QuestionId" value="@(Model.QuestionNumber)" />
    <div class="row">
        <div class="col-md-10">
            <table>
                <tr>

                    @*<td><a href="javascript:void(0);" class="btn btn-primary" onclick="saveBackward(this);">|<< Save & Previous </a></td>*@
                    <td><a href="@Url.Action("EvalPage", new { @token = Session["TOKEN"], @tid = Session["TESTID"], @qno = (Model.QuestionNumber > 1 ? Model.QuestionNumber - 1 : 1) })" class="btn btn-default"> |<< Previous </a></td>
                    @for (int i = 0; i < Model.TotalQuestionInSet; i++)
                    {
                        <td><a href="@Url.Action("EvalPage", new { @token = Session["TOKEN"], @tid = Session["TESTID"], @qno = (i + 1) })" class="btn @(Model.QuestionNumber == (i + 1) ? "btn-primary" : "btn-default" ) ">@(i + 1)</a></td>
                    }
                    <td><a href="@Url.Action("EvalPage", new { @token = Session["TOKEN"], @tid = Session["TESTID"], @qno = (Model.QuestionNumber < (totalQuestion - 1) ? Model.QuestionNumber + 1 : totalQuestion) })" class="btn btn-default">Next >>|</a></td>
                    <td><a href="javascript:void(0);" class="btn-btn-primary" onclick="saveForward(this);"> Save & Next >>| </a></td>

                </tr>

            </table>
            <table>

                <tr>
                    <td><a href="javascript:void(0);" class="btn-btn-primary" onclick="myFunction(this);"> Submit >>| </a></td>
                </tr>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <p>
                <br />
                @Html.Raw(Model.Question ?? "")
            </p>
            @switch (Model.QuestionType)
            {
                case "RADIO":
                    <div class="prelude">Choose the correct answer</div>
                    <ul class="js_choices">
                        @for (int i = 0; i < Model.Options.Count; i++)
                        {
                            <li>
                                <input type="hidden" name="UserChoices[@i].ChoiceId" value="@Model.Options[i].ChoiceId" />
                                <input type="radio" name="UserChoices[@i].IsChecked" @(!string.IsNullOrEmpty(Model.Options[i].Answer) ? "CHECKED" : "") />
                                <span class="code">@Html.Raw(Model.Options[i].Label.Replace("[", "&lt;").Replace("]", "&gt;"))</span>
                            </li>
                        }
                    </ul>
                    <input type="hidden" name="Answer" value="no data" />
                    break;
                case "MULTIPLE":
                    <div class="prelude">Choose all that is correct</div>
                    <ul class="js_choices">
                        @for (int i = 0; i < Model.Options.Count; i++)
                        {
                            <li>
                                <input type="hidden" name="UserChoices[@i].ChoiceId" value="@Model.Options[i].ChoiceId" />
                                <input type="checkbox" name="UserChoices[@i].IsChecked" @(!string.IsNullOrEmpty(Model.Options[i].Answer) ? "CHECKED" : "") />
                                <span class="code">@Html.Raw(Model.Options[i].Label.Replace("[", "&lt;").Replace("]", "&gt;"))</span>
                            </li>
                        }
                    </ul>
                    <input type="hidden" name="Answer" />
                    break;
                case "TEXT":
                    <div>Write your thoughts:</div>
                    <div>
                        <p>
                            <input type="hidden" name="UserChoices[0].ChoiceId" value="@Model.Options[0].ChoiceId" />
                            <textarea name="Answer" class="form-control">@(Model.Options[0].Answer)</textarea>
                        </p>                        {
                    </div>
                    break;
            }
        </div>
    </div>
}
<script>
    @*var remSeconds = @timeRemaining;
    var secondsCounter = remSeconds % 60;
    function formatNumber(number) {
        if (number < 10) return '0' + number;
        else return '' + number;
    }
        function startTick() {
            document.getElementById("secRemaining").innerText = formatNumber(secondsCounter);
            document.getElementById("minRemaining").innerText = formatNumber(parseInt(remSecond/60));

            var _tick = setInterval(function () {
                if (remSeconds > 0) {
                    remSeconds = remSeconds - 1;
                    secondsCounter = secondsCounter - 1;
                    document.getElementById("secRemaining").innerText = formatNumber(secondsCounter);
                    document.getElementById("minRemaining").innerText = formatNumber(parseInt(remSeconds / 60));
                    if (secondsCounter == 0)
                        secondsCounter = 60;
                }
                else {
                    alert('Your Exam Time has Expired');
                    clearInterval(_tick);
                }
        }, 1000);
    var remsec =@timeRemaining;
        var count = 0;
        var chances = -1;
        var totalcount = 3

        function myLeaveFunction() {

            count++;
            chances = totalcount - count;
            if (chances > 0) {
                alert("You Moved out of the page. You have   " + chances + " chances left")
            }
            else
                alert("SORRY, You violated the rules ")
            if (count > 2) {
                window.location = 'https://www.google.com/';
            }

        }*@

   function saveForward(sender)
    {
       $('#direction').val('forward');
       document.getElementById("myForm").submit();
    }

    function saveBackward(sender)
    {
        $('#direction').val('backward');
        document.getElementById("myForm").submit();
    }
    function myFunction() {
        document.getElementById("myForm").innerHTML = "Your test has been submited successfully";
    }
</script>
@section scripts{
    <script>
        $(document).ready(function () {

            $('ul.js_choices li input[type="radio"]').on('click', function () {
                var parentul = $(this).closest('ul.js_choices');
                $.each(parentul.find('input[type="radio"][name!="' + $(this).attr('name') + '"]:checked'), function (i, e) {
                    $(e).prop('checked', false);
                });
            });
        })

    </script>
}
