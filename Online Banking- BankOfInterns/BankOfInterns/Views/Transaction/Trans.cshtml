@model BankOfIntern.Models.TransTable
@Session["uid"]

<fieldset>
    <div class="link1"><h3>NEFT Payment</h3></div>
</fieldset>

<link href="~/Content/Trans1.css" rel="stylesheet" />
@{
    
    string url = Url.Action("Logout", "Logout");
}
<input type="button" value="Logout" class="submit" onclick="window.location.href = '@url'" />
<div class="OT1">
    <ul class="nav navbar-nav">
        <li class=" @(ViewContext.RouteData.Values["Action"].ToString()=="Beneficiary"?"active":"" )">
            @Html.ActionLink("Beneficiary", "Benifi", "Transaction", new { area = "" }, new { id = "OT1", style = "color:rgb(198,199,198);text-decoration:none;background-color: #343434;font-size:20px" })
        </li>
        <li class=" @(ViewContext.RouteData.Values["Action"].ToString()=="Transaction"?"active":"" )">
            @Html.ActionLink("Transaction", "Trans", "Transaction", new { area = "" }, new { id = "OT1", style = "color:rgb(198,199,198);text-decoration:none;background-color: #343434;font-size:20px" })
        </li>

    </ul>
</div>

<div class="dropdown">
    <button onclick="myFunc()" class="dropbtn">Menu</button>
    <div id="myDropdown" class="dropdown-content" onclick="myFunc()">
        @Html.ActionLink("Branch Details", "BranchDetails", "DashBoard", new { id = Session["uid"] }, new { })
        @Html.ActionLink("Account Statement", "AcStatement", "DashBoard", new { id = Session["uid"] }, new { })
        @Html.ActionLink("Account Summary", "AcSummary", "DashBoard", new { id = Session["uid"] }, new { })
        @Html.ActionLink("Transactions", "Trans", "Transaction", new { id = Session["uid"] }, new { })
    </div>
</div>
@using (Html.BeginForm("Trans", "Transaction", "Post"))
{
    <div class="container">
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.AccNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" >
                    @Html.EditorFor(model => model.AccNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AccNo, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.FromAccNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FromAccNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FromAccNo, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.ToAccNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" >
                    @Html.EditorFor(model => model.ToAccNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ToAccNo, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.BeneficiaryID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BeneficiaryID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BeneficiaryID, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" >
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.TransDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TransDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TransDate, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.TransTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TransTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TransTime, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.TransType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TransType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TransType, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.TransactionID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TransactionID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TransactionID, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" >
                    @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" id="submit" value="Transfer" class="btn btn-default" style="background-color: #343434; border: none; color: white; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; margin-top:22%; cursor: pointer; border-radius: 16px; width: 10%; margin-left: 100px;" />
                </div>
            </div>
        </div>
    </div>
}

<script>
    function myFunc() {
        document.getElementById("myDropdown").classList.toggle("show");
    }

    // Close the dropdown menu if the user clicks outside of it
    window.onclick = function (event) {
        if (!event.target.matches('.dropbtn')) {
            var dropdowns = document.getElementsByClassName("dropdown-content");
            var i;
            for (i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.add('show');
                }
            }
        }
    }
</script>
